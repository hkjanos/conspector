import subprocess
import os
import json
from flask import current_app as app
from app.utils.table_export import convert_cyclonedx_to_excel

def scan_vulnerabilities(sbom_file_path):
    try:
        # Define the output path for vulnerabilities
        report_output_dir = os.getenv("REPORT_OUTPUT_DIR")
        if not report_output_dir:
            raise ValueError("REPORT_OUTPUT_DIR environment variable is not set.")

        sbom_output_path = os.path.dirname(sbom_file_path)
        vulnerabilities_output_file = os.path.basename(sbom_file_path).replace("sbom", "sbom-vulnerabilities")

        vulnerabilities_file_path = os.path.join(sbom_output_path, vulnerabilities_output_file)

        # Construct the Grype command
        grype_command = [
            "C:/grype/grype.exe",  # Path to Grype
            f"sbom:{sbom_file_path}",  # Pass the SBOM file path
            "-o", "cyclonedx-json",  # Specify the output format
        ]

        # DEBUGGING: Log the Grype command
        app.logger.debug(f"Running Grype command: {' '.join(grype_command)}")

        # Execute Grype and capture its output into the specified file
        with open(vulnerabilities_file_path, 'w') as output_file:
            subprocess.run(grype_command, check=True, stdout=output_file, stderr=subprocess.PIPE)

        # Generate the output path for the Excel file (make sure it has .xlsx extension)
        excel_output_path = vulnerabilities_file_path.replace('.json', '.xlsx')

        # Ensure the directory exists for the Excel file output
        os.makedirs(os.path.dirname(excel_output_path), exist_ok=True)

        # Convert the CycloneDX report to Excel
        convert_cyclonedx_to_excel(vulnerabilities_file_path, excel_output_path)

        # Return the path of the generated vulnerabilities report
        return excel_output_path

    except subprocess.CalledProcessError as e:
        app.logger.error(f"Failed to scan SBOM for vulnerabilities. Error: {e}")
        return None
    except Exception as e:
        app.logger.error(f"Unexpected error during vulnerability scan: {e}")
        return None
